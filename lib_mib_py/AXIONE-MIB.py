# PySNMP SMI module. Autogenerated from smidump -f python AXIONE-MIB
# by libsmi2pysnmp-0.1.3 at Tue Sep 24 15:26:40 2013,
# Python version sys.version_info(major=2, minor=7, micro=3, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Counter64, Integer32, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, enterprises, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "enterprises")
( DisplayString, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")

# Types

class CounterIndex(TextualConvention, Integer32):
    displayHint = "d"
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(0,2147483647)
    
class TrueFalse(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,0,)
    namedValues = NamedValues(("false", 0), ("true", 1), )
    

# Objects

axione_mib = ModuleIdentity((1, 3, 6, 1, 4, 1, 33923)).setRevisions(("2013-09-24 00:00","2013-09-10 00:00","2013-08-23 00:00","2013-08-20 00:00","2013-08-14 00:00",)).setLabel("axione-mib")
if mibBuilder.loadTexts: axione_mib.setOrganization(" axione ")
if mibBuilder.loadTexts: axione_mib.setContactInfo("\nAuthor: Axione STN2 Simon RECHER\nwww.axione.fr")
if mibBuilder.loadTexts: axione_mib.setDescription("MIB Axione.")
conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 33923, 0))
baculaConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 33923, 0, 1))
baculaGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 33923, 0, 1, 2))
baculaStats = MibIdentifier((1, 3, 6, 1, 4, 1, 33923, 1))
baculaVersion = MibScalar((1, 3, 6, 1, 4, 1, 33923, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baculaVersion.setDescription("Version du Director de bacula")
baculaTotalClients = MibScalar((1, 3, 6, 1, 4, 1, 33923, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baculaTotalClients.setDescription("Nombre de client bacula")
baculaTotalClientsErrors = MibScalar((1, 3, 6, 1, 4, 1, 33923, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baculaTotalClientsErrors.setDescription("Nombre de client bacula en erreur : Sans Job cree depuis ou avec au moins un job en erreur dans les 24 dernieres heures")
baculaClientsTable = MibTable((1, 3, 6, 1, 4, 1, 33923, 1, 4))
if mibBuilder.loadTexts: baculaClientsTable.setDescription("table contenant tout les clients")
baculaClientsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33923, 1, 4, 1)).setIndexNames((0, "AXIONE-MIB", "baculaClientIndex"))
if mibBuilder.loadTexts: baculaClientsEntry.setDescription("les entrees de la table")
baculaClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33923, 1, 4, 1, 1), CounterIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baculaClientIndex.setDescription("index de la table")
baculaClientName = MibTableColumn((1, 3, 6, 1, 4, 1, 33923, 1, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baculaClientName.setDescription("Nom des clients")
baculaClientError = MibTableColumn((1, 3, 6, 1, 4, 1, 33923, 1, 4, 1, 3), TrueFalse()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baculaClientError.setDescription("Client avec aucun job cree ou au moins un job en erreur dans les 24 heures")
baculaClientSizeBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 33923, 1, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baculaClientSizeBackup.setDescription("Taille de la sauvegarde sur les dernieres 24h")
baculaClientTotalSizeBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 33923, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baculaClientTotalSizeBackup.setDescription("Taille de la sauvegarde sur tout les jobs")
baculaClientNumberFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 33923, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baculaClientNumberFiles.setDescription("Nombre de fichier sur les 24h")
baculaClientTotalNumberFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 33923, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baculaClientTotalNumberFiles.setDescription("Nombre de fichier de tout les jobs")

# Augmentions

# Groups

baculaGroupClients = ObjectGroup((1, 3, 6, 1, 4, 1, 33923, 0, 1, 2, 1)).setObjects(*(("AXIONE-MIB", "baculaClientError"), ("AXIONE-MIB", "baculaClientNumberFiles"), ("AXIONE-MIB", "baculaClientTotalNumberFiles"), ("AXIONE-MIB", "baculaClientSizeBackup"), ("AXIONE-MIB", "baculaTotalClientsErrors"), ("AXIONE-MIB", "baculaClientName"), ("AXIONE-MIB", "baculaVersion"), ("AXIONE-MIB", "baculaClientTotalSizeBackup"), ("AXIONE-MIB", "baculaTotalClients"), ) )
if mibBuilder.loadTexts: baculaGroupClients.setDescription("A collection of objects providing information\napplicable to Bacula statistics.")

# Compliances

baculaCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 33923, 0, 1, 1)).setObjects(*(("AXIONE-MIB", "baculaGroupClients"), ) )
if mibBuilder.loadTexts: baculaCompliance.setDescription("The compliance statement for SNMP entities which have\nbacula status counters.")

# Exports

# Module identity
mibBuilder.exportSymbols("AXIONE-MIB", PYSNMP_MODULE_ID=axione_mib)

# Types
mibBuilder.exportSymbols("AXIONE-MIB", CounterIndex=CounterIndex, TrueFalse=TrueFalse)

# Objects
mibBuilder.exportSymbols("AXIONE-MIB", axione_mib=axione_mib, conformance=conformance, baculaConformance=baculaConformance, baculaGroups=baculaGroups, baculaStats=baculaStats, baculaVersion=baculaVersion, baculaTotalClients=baculaTotalClients, baculaTotalClientsErrors=baculaTotalClientsErrors, baculaClientsTable=baculaClientsTable, baculaClientsEntry=baculaClientsEntry, baculaClientIndex=baculaClientIndex, baculaClientName=baculaClientName, baculaClientError=baculaClientError, baculaClientSizeBackup=baculaClientSizeBackup, baculaClientTotalSizeBackup=baculaClientTotalSizeBackup, baculaClientNumberFiles=baculaClientNumberFiles, baculaClientTotalNumberFiles=baculaClientTotalNumberFiles)

# Groups
mibBuilder.exportSymbols("AXIONE-MIB", baculaGroupClients=baculaGroupClients)

# Compliances
mibBuilder.exportSymbols("AXIONE-MIB", baculaCompliance=baculaCompliance)
